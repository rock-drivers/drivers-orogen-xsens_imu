name 'xsens_imu'

import_types_from "base"
using_library 'xsens'

import_types_from "XsensTypes.hpp"
import_types_from "aggregator"

task_context 'Task' do
    needs_configuration
    fd_driven

    property('port', '/std/string', "").
        doc 'the device port'
    property('timeout', 'int', 100).
        doc 'the IO timeout in milliseconds'
    property('scenario', '/std/string', 'human').
    	doc 'the filter scenario. Use the xsensTest application to list the available ones'
    property('imu_frame', '/std/string', 'imu').
    	doc 'the name of the frame attached to the IMU'
    property('world_frame', '/std/string', 'world').
    	doc 'the name of the world frame'

    property('max_timeouts', 'int').
        doc 'number of consecutive timeouts after which an error is raised'

    output_port('orientation_samples', '/base/samples/RigidBodyState').
        doc 'provides timestamped IMUReading samples containing the orientation estimate as reported by the IMU.'
    output_port('calibrated_sensors', '/base/samples/IMUSensors').
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings.'

    input_port('hard_timestamps', '/base/Time').
        doc 'timestamps of the begin of acquisition, as signaled by sync_out (or signaled to sync_in).'

    output_port('timestamp_estimator_status', 'aggregator::TimestampEstimatorStatus').
	doc("Debug output of the TimestampEstimator")

    exception_states :IO_ERROR, :DRIVER_ERROR
end

deployment "xsens_imu" do
    do_not_install
    acquisition = task('xsens_imu', "Task")

    add_default_logger
    # Sets up a task browser on the following task
    if !corba_enabled?
        browse acquisition
    end
end

